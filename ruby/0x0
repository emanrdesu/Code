#!/usr/bin/ruby

# A cli interface for http://0x0.st
# Upload local files or from a URL
# Delete uploaded files
# Change expiration date of uploaded files

require 'openssl'
require 'optimist'
require 'open3'
require 'base64'

CACHE = (ENV['XDG_CACHE_DIR'] || ENV['HOME'] + '/.cache') + '/0x0'
SHA256 = OpenSSL::Digest.new("SHA256")

### utility functions

def response(x)
  status = x[0][0].split[1]
  headers = x[1..].take_while { |a| a.size > 0 }
  body = x[headers.size + 2 ..].join("\n")

  headers.to_h
    .tap { |h| h['Status'] = status }
    .tap { |h| h['Body'] = body }
end

def exit_error(message, *args)
  $stderr.printf message + "\n", *args
  exit 1
end

def cache_save(cache)
  File.write(CACHE, cache)
end

### classes

class Command
  def initialize(link='http://0x0.st')
    @headers = {}
    @link = link
  end

  def add_header(header, value)
    (@headers[header] = value) if header ; self
  end

  def to_s
    ['curl -i',
     @headers.map { |k,v| "-F'#{k}=#{v}'" },
     @link,
    '2> /dev/null'
    ].join ' '
  end
end

class Post
  def self.execute(command)
    Open3.popen2(command.to_s) do |i,o|
      o.gets(nil).lines
        .map(&:chomp)
        .map { |l| l.split(': ') }
    end
      .then &method(:response)
  end

  def self.file(file, secret=nil)
    Command.new
      .add_header('file', '@' + file)
      .add_header(secret ? 'secret' : nil, '')
      .then &Post.method(:execute)
  end

  def self.link(link, secret=nil)
    Command.new
      .add_header('url', link)
      .add_header(secret ? 'secret' : nil, '')
      .then &Post.method(:execute)
  end
end

### main

opts = Optimist::options do
  opt :file, "File(s) to upload", :type => :strings
#  opt :link, "Link(s) to upload from", :type => :strings
  opt :secret, "Make result URL(s) obsfuscated"
  opt :delete, "Delete uploaded file(s) or URL(s)", :type => :strings
  opt :view, "View uploaded file(s) and URL(s)"

  conflicts :view, :file
  conflicts :view, :delete, :secret
end

system "touch #{CACHE}"
cache = (eval File.read(CACHE)) or {}


if opts[:file_given]
  opts[:file]
    .each do |f|
    File.exists?(f) or exit_error "File '#{f}' does not exist"
    Post.file(f, opts[:secret])
  end
end
