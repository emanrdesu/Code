#!/usr/bin/ruby

# terminal stopwatch program
# press Enter to mark an entry
# press Space to pause
# press Control+D to exit
# press jk or JK to increase/decrease timer

require 'io/console'

def gettime
  Process.clock_gettime(Process::CLOCK_MONOTONIC)
end

$start_time = gettime()
$enter_count = 0
$paused_time = 0
$paused_time_current = 0
$paused = false
$paused_at = nil
$entered_at = nil

def get_elapsed_seconds(since_when = $start_time)
  if since_when == $start_time
    gettime() - since_when - $paused_time
  else
    gettime() - since_when - $paused_time_current
  end
end

def format_elapsed_time(elapsed_seconds)
  hours, remainder = elapsed_seconds.divmod(3600)
  minutes, seconds = remainder.divmod(60)
  milliseconds = (seconds - seconds.to_i) * 1000
  time_format = hours > 0 ? "%02d:%02d:%02d:%03d" : "%02d:%02d:%03d"

  if hours > 0
    format(time_format, hours, minutes, seconds.to_i, milliseconds.to_i)
  else
    format(time_format, minutes, seconds.to_i, milliseconds.to_i)
  end
end

def print_time(force: nil)
  return if $paused && !force
  print "\r#{format_elapsed_time(get_elapsed_seconds)}"
  if $entered_at
    print " #{format_elapsed_time(get_elapsed_seconds($entered_at))}"
  end
end


# thread for handling user input

def change_time(n)
  $start_time += n
  $entered_at += n if $entered_at
  print_time(force: true)
end


Thread.new do
  loop do
    case IO.console.getch
    when "\u0004" # Ctrl+D (EOF)
      puts "\n\n"
      exit
    when "\r" # Enter
      $enter_count += 1
      $entered_at = gettime()
      $paused_time_current = 0
      puts " (#{$enter_count})"
      print_time(force: true)
    when " " # Space
      $paused_at = gettime() if !$paused
      $paused_time += gettime() - $paused_at if $paused
      $paused_time_current = gettime() - $paused_at if $paused
      $paused = !$paused
    when "j"
      change_time(60)
    when "J"
      change_time(600)
    when "k"
      change_time(-60)
    when "K"
      change_time(-600)
    end
  end
end

begin
  # Hide the cursor
  print "\e[?25l"

  loop do
    print_time
    sleep 0.1
  end
ensure
  # Show the cursor
  print "\e[?25h"
end
