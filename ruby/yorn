#!/usr/bin/ruby

### yorn is a program for managing journals (yornals)
### uses git for version control
### FUTURE: support encryption

require 'optimist'
require 'openssl'

### globals

DEPTH = {
  box:    0,
  year:   1,
  month:  2,
  day:    3,
  hour:   4,
  minute: 5, min: 5
}

SHA256 = OpenSSL::Digest.new("SHA256")

### utility Functions

alias m method

def yes_or_no?(question, pre=nil, post=nil)
  puts pre if pre
  loop do
    print (question + ' (yes/no): ')
    answer = $stdin.gets ; die(1) if answer.nil?
    answer = answer.chomp.downcase
    if ["yes", "y", "no", "n"].any?(answer) then
      puts post if post
      return ["yes", "y"].any?(answer)
    else
      puts "Please enter 'yes', 'y', 'n', or 'no'."
    end
  end
end

def die(status = 0)
  yield if block_given?
  exit(status)
end

def yornal_depth (dir)
  return 0 if not File.directory? dir
  Dir.children(dir)
    .delete_if {|i| i =~ /\D/} # remove nested yornals
    .map {|i| 1 + yornal_depth([dir, i].join('/'))}.max or 1
end

def tree (dir)
  return [dir] if !(File.directory? dir) || dir =~ /\.git/
  Dir.children(dir).map {|f| tree [dir,f].join('/')}.flatten
end


def defbin(x, fallback: [])
  define_method(x) do
    binaries = fallback
    path = ENV["PATH"].split(':')
    ENV[x.to_s.upcase] or
      binaries.find {|b| path.any? {|p| File.exist? "#{p}/#{b}"}} or "cat"
  end
end

defbin(:editor, fallback: ["zile", "nano", "vi", "emacs", "vim", "code"])
defbin(:pager, fallback: ["less", "more"])

def mkdir(path)
  system "mkdir -p #{path} > /dev/null" or
    exitError("could not create directory '%s'", path)
end

def exitError(message, *args)
  STDERR.printf "Error: " + message + "\n", *args ; die 1
end

### stdlib class additions

class Integer
  def second() self end
  def minute() self * 60.second end
  def hour() self * 60.minute end
  def day() self * 24.hour end
  def week() self * 7.day end
  def month() self * 4.week end
  def year() self * 12.month end

  def to_ss()
    (self < 0 ? '' : '+') + self.to_s
  end
end

class Hash
  def flip
    x = {}
    self.each do |k,v|
      x[v] = k
    end
    x
  end
end

class Time
  def box
    ''
  end

  def path(x)
    # only first 5 elements are relevant (m,h,d,mon,y)
    self.to_a[..5].reverse.take([0, DEPTH[x] - 1].max).join('/')
  end
end

class String
  def lstrip_by(chars)
    self.gsub(Regexp.new("^[#{chars}]+"), '')
  end

  def rstrip_by(chars)
    self.gsub(Regexp.new("[#{chars}]+$"), '')
  end

  def strip_by(chars)
    self.lstrip_by(chars).rstrip_by(chars)
  end

  def stlip(c)
    self.strip_by(c).split(c)
  end

  def number?
    self =~ /^\d+$/
  end
end

class Array
  def jomp(x)
    self.join(x).chomp(x)
  end
end

class Symbol
  def +(symbol)
    (self.to_s + symbol.to_s).to_sym
  end
end

class Object
  def when(n = self)
    (n === self) and yield self
    self
  end
end

### git functions

def git(*command) # appended
  system command.insert(0, "git").join(' ')
end

### main classes

class Yornal
  attr_reader :name, :type

  ## class methods

  def Yornal.create(name, type)
    {  /^\./   =>  "begin with a dot",
       /^\//   =>  "begin with /",
       /\/$/   =>  "end with /",
      /[\^]/   =>  "contain ^",
      /\/\//   =>  "contain consecutive /",
      /\.git/  =>  "contain '.git'",
      /^git$/  =>  "be 'git'",
      /^\d+$/  =>  "be digits only",
      /[^\/\._A-za-z0-9\-]/ =>  "have chars not in [a-z], [0-9] or [/_-.]"
    }.each do |regex, errorMessage|
      name =~ regex and exitError("name cannot " + errorMessage)
    end

    Yornal.list.find {|x| x == name} and exitError("yornal '#{name}' already exists")

    if type == :box
      File.open($yornalPath + '/' + name, "w") {}
      git(:add , $yornalPath + '/' + name)
      git(:commit, "-m \"create box yornal '#{name}'\"")
    else
      mkdir [$yornalPath, name, Time.now.path(type)].jomp('/')
      Yornal.new(name).edit("echo > ")
    end
  end

  def Yornal.delete(name, ask=true)
    Yornal.list.find { |x| x == name } or exitError("'#{name}' yornal doesn't exist")
    pre = "You are about to delete yornal '#{name}'."
    question = "Are you sure you want to delete it?"
    if (!ask || yes_or_no?(question, pre))
      Yornal.new(name).entries.each { |e| e.delete(ask=false) }
    end
  end

  def Yornal.list
    tree($yornalPath)
      .delete_if { |v| v =~ /\.git/ }
      .map { |w| w[$yornalPath.size + 1 ..] }
      .map { |x| x.split('/') }
      .map { |y| y.take_while { |q| !q.number? } }
      .map { |z| z.jomp('/') }.uniq
  end

  def Yornal.report
    spacing = nil ; countSpacing = nil
    Yornal.list
      .map { |y| [y, Yornal.new(y).entries.size] }
      .tap { |ycs|
        die { puts "No yornals available. Create one with --create" } if ycs.empty?
        spacing = ycs.map(&:first).map(&:size).max + 2
        countSpacing = ycs.map(&:last).map(&:to_s).map(&:size).max
        printf "%-#{spacing}s %-#{countSpacing}s  type\n", "yornal", "#"
      }.each do |y, c|
      printf "%-#{spacing}s %-#{countSpacing}d  %s\n", y, c, Yornal.new(y).type
    end
  end

  ## instance methods

  def initialize(name)
    @name = name
    @type = DEPTH.flip[yornal_depth(path())]
  end

  def path
    $yornalPath + "/" + @name
  end

  def edit(editor = editor(), time=Time.now, ignore=nil)
    entryParent = [path, time.path(@type)].jomp('/')
    mkdir(entryParent) unless @type == :box
    entry = [entryParent, time.send(@type).to_s].jomp('/')

    if File.exists? entry
      Entry.fromPath(entry).edit(editor, :modify, ignore)
    else
      system "touch #{entry}"
      Entry.fromPath(entry).edit(editor, action=:create, ignore)
      File.delete entry if File.size(entry) == 0
    end
  end

  def entries(query = '@')
    self.query(query).map { |p| Entry.fromPath p }.sort
  end

  # e.g. pattern: @/@/8, 2022/09/@ ; depends on yornal type (depth)
  def query(pattern)
    dateStructure = [:year, :month, :day, :hour, :min]
    datehash = -> x { x.zip(dateStructure).to_h.flip }

    tree(path()).filter do |path|
      entry = path[$yornalPath.size + @name.size + 1 ..]
      unless entry.split('/').join =~ /\D/ # remove nested yornals
        entryHash = datehash.(entry.stlip('/'))
        patternHash = datehash.(pattern.downcase.stlip('/'))

        patternHash.map do |k, v|
          (not entryHash[k]) or (v == '@') or
            v.split(',').map do |x|
            l, r = x.split('-')
            (l .. (r or l)) #ranges work for integer strings
          end.any? {|range| range.include? entryHash[k]}
        end.all? true
      end
    end
  end

  def first(x, n = 1, from = entries)
    return from[.. (n-1)] if (x == :entry)
    t = from[0].to_t
    from.filter { |e| e < (t + n) }
  end

  def last(x, n = 1, from = entries)
    return from[(-n) ..] if (x == :entry)
    t = Time.now
    from.filter { |e| e > (t - n) }
  end
end


class Entry
  include Comparable
  attr_reader :pdate, :yornal # pseudo date, yornal (obj or name)

  def <=>(x)
    to_t() <=> ((x.is_a? Entry) ? x.to_t : x)
  end

  def Entry.fromPath(path)
    path[$yornalPath.size ..].stlip('/')
      .partition { |x| x =~ /^\d+$/ }
      .map { |a| a.join('/') }
      .then { |date, yornal| Entry.new date, yornal }
  end

  def initialize(date, yornal)
    @date = (date.is_a? Time) ? date.to_a[..5].drop_while{|i| i == 0}.reverse.join('/') : date
    @yornal = (yornal.is_a? Yornal) ? yornal : Yornal.new(yornal)
  end

  def path
    [$yornalPath, name].jomp('/')
  end

  def name
    [@yornal.name, @date].jomp('/')
  end

  def to_t
    Time.new(*@date.split('/'))
  end

  def contains?(word)
    File.read(path) =~ Regexp.new(word, :i)
  end

  def matches?(regex)
    File.read(path) =~ Regexp.new(regex)
  rescue RegexpError
    exitError "Malformed regexp"
  end

  def edit(editor=editor(), action=:modify, ignore=nil)
    digest = SHA256.digest(File.read(path()))
    system "#{editor} #{path}"
    unless ignore || digest == SHA256.digest(File.read(path()))
      git(:add, path())
      git(:commit, "-m '#{action} #{@yornal.name} entry #{@date}'")
    end
  end

  def delete(ask=true)
    pre = "You are about to delete yornal entry '#{name}'."
    question = "Are you sure you want to delete it?"
    git(:rm, "#{path}") if (!ask || yes_or_no?(question, pre))
  end

  def printout(delimiter="\n\n")
    $stdout.print File.read(path)
    $stdout.print delimiter
  end

  def printpath(delimiter="\n", fullpath)
    $stdout.print (fullpath ? path : name)
    $stdout.print delimiter
  end
end


## documentation and command line parsing

class Format
  def Format.examples(option, hash)
    return if hash[:examples].nil?
    hash[:examples]
      .map { |e| (' ' *  2) + e }
      .unshift("--#{option} examples:")
      .join("\n")
  end

  def Format.syntax(syntax)
    [syntax].flatten.join("\n")
  end

  def Format.monthswap(string)
    string = string.downcase

    [ "january",
      "february",
      "march",
      "april",
      "may",
      "june",
      "july",
      "august",
      "september",
      "october",
      "november",
      "december"
    ] .map { |m| [m, m[0..2]].map {|x| Regexp.new(x)} }
      .zip(1..) do |names, i|
      names.each { |n| string.gsub!(n, i.to_s) }
    end

    string
  end

  def Format.special(x)
    eval "\"#{x}\""
  end
end


class Parse

  @@timeFields = [
    [:week , "w", "week"],
    [:second, "s", "second"],
    [:year, "y", "year"],
    [:month, "m", "mon", "month"],
    [:day, "d", "day"],
    [:hour, "h", "hour"],
    [:minute, "min", "minute"]
  ]

  def Parse.entrySpecHelper(argument, entries)
    location, *operands = argument.split(/[\+\-]/)
    ops = argument.scan(/[\+\-]/)

    { ["", "t", "tail"]      =>  proc { |a,n| a[a.size - 1 + n] },
      ["h", "head"]          =>  proc { |a,n| a[n] },
      ["m", "mid", "middle"] =>  proc { |a,n| a[(a.size / 2) + n] }
    } .find { |k,v| k.any? location }
      .tap {|_| _ or exitError "undefined location '#{location}'" }
      .then do |_, locator|
        return locator[entries, 0].to_t if operands.empty?
        yield location, operands, ops, locator
    end
  end

  def Parse.editFlag(argument, entries) # => Time
    Parse.entrySpecHelper(argument, entries) do |*vars|
      location, operands, ops, locator = vars

      expr = operands.take_while(&:number?).zip(ops).map(&:reverse)
      ops = ops[expr.size ..]
      operands = operands[expr.size ..]

      arg = (eval expr.join) || 0
      op = ops.shift
      anchor = locator[entries, arg]
      anchor or exitError("entry #{location}#{arg.to_ss} does not exist")

      operands.map {|x| Parse.timeLiteral x}
        .zip(ops).join
        .then { |time| anchor.to_t + (op == '+' ? 1 : -1) * (eval(time) || 0) }
    end
  end

  def Parse.entrySpec(argument, entries) # Time
    Parse.entrySpecHelper(argument, entries) do |*vars|
      location, operands, ops, locator = vars

      operands.all? &:number? or exitError("invalid argument '#{argument}'")
      (operands.size == ops.size) or exitError("invalid expression")
      arg = eval ops.zip(operands).join || 0

      locator[entries, arg].to_t
    end
  end

  def Parse.lastFirstFlag(argument) # [Symbol, Integer]
    return [:entry, argument.to_i] if argument.number?

    @@timeFields.find {|_, *forms| forms.any? argument}
      .when(Array) { argument = "1.#{argument}" }

    operands = argument.split(/[\+\-]/)
    ops = argument.scan(/[\+\-]/)

    operands.map {|x| Parse.timeLiteral x}
      .zip(ops).join
      .then { |r| [:time, eval(r)] }
  end

  def Parse.timeLiteral(x) # Integer
    x =~ /\d+\.[a-z]+/ or exitError("malformed time spec '#{x}'")
    n, field = x.split('.')

    @@timeFields
      .find { |m, *forms| forms.any? field }
      .tap {|_| _ or exitError "undefined time field '#{field}'"}
      .slice(0).then { |m| n.to_i.send(m) }
  end

  def Parse.yornalType(type)
    (@@timeFields[2..] + [[:box, "x", "box"]])
      .find { |_, *forms| forms.any? type }
  end
end


class Validate
  def Validate.queryFlag(query)
    query =~ /\/\// and exitError 'consecutive / in query'
    query.split('/')
      .tap { |x| (x.size > 0) or exitError "empty query" }
      .each do |n|
        n.split(',').each do |n|
          unless (n =~ /^\d+(\-\d+)?$/) || (n == '@')
            exitError "malformed --query component '#{n}'"
          end
      end
    end
  end

  def Validate.entryLiteral(argument)
    fields = argument.split('/')
    fields.all? &:number? or exitError "malformed entry literal"
    (fields.size <= 6) or  exitError "only 6 datetime fields can be specified max"
    fields.map(&:to_i).all? { |i| i >= 0} or exitError "negative numbers not allowed"
  end
end


$options = {

  last: {
    default: "1",
    syntax: [
      "[$n | timeSpan[±timeSpan]*]",
      "  where $j, $n ∈ NaturalNumber",
      "  and timeSpan ::= [$j.]dateAttr",
      "  and dateAttr ::= y[ear] | m[on[th]] | w[eek]",
      "                | d[ay] | h[our] | min[ute]"
    ],

    examples: [
      "# selects the last entry in foo",
      "yorn foo --last",
      "# all the entries in foo in the past 3 years",
      "yorn foo --last 3.year",
      "# last 4 entries in bar yornal",
      "yorn bar --last 4",
      "# all the entries in qux in the past 2 month + 3 days",
      "yorn qux --last 3.day+2.mon",
      "# default action for multiple entries is to print entry paths",
    ]
  },

  first: {
    default: "1",
    syntax: [
      "[$n | timeSpan[±timeSpan]*]",
      "  where $j, $n ∈ NaturalNumber",
      "  and timeSpan ::= [$j.]dateAttr",
      "  and dateAttr ::= y[ear] | m[on[th]] | w[eek]",
      "                | d[ay] | h[our] | min[ute]"
    ],

    examples: [
      "# select first 5 entries in baz",
      "yorn baz --first 5",
      "# select entries in the period between the first",
      "# entry in pom and 2 months after the entry",
      "# very similiar to --last",
      "yorn pom --first 2.mon"
    ]
  },

  query: {
    default: '@',
    syntax: [ "$year[/$month[/$day[/$hour[/$minute]]]]",
              "  where $year,$month,$day,$hour and $minute",
              "  ::= int[,(int | int-int)]* | \"@\"",
              "  $month can be any month name as well\n " ],

    examples: [
      "# select all entries in the 'ter' yornal (default/automatic)",
      "yorn ter -q",
      "# select all entries in any year where the month is august",
      "yorn hue --query @/aug",
      "# selects all entries even though day was specified",
      "# because querying only cares about yornal set fields",
      "# i.e. only the two @'s are looked at in this case",
      "yorn monthlyJournal -q @/@/1"
    ]
  },

  edit: {
    default: "tail",
    syntax: [
      "loc[±$n | ±$k[±$i.dateAttr]*]",
      "  where $n, $k, $i ∈ NaturalNumber",
      "    and loc ::= [tail] | h[ead] | m[id[dle]]",
      "    and dateAttr ::= y[ear] | m[on[th]]",
      "                  | w[eek] | d[ay]",
      "                  | h[our] | min[ute]"
    ],

    examples: [
      "# get entries from last year, edit the third from last entry",
      "yorn yup -l y -e t-2",
      "# error, as there is nothing after tail",
      "yorn jan -e tail+1",
      "# get all entries in hex yornal",
      "# edit entry 1.5 months before the fourth entry",
      "# entry won't exist, so will be created, and will be new first entry",
      "yorn hex -e head+3-2.month+15.day"
    ]
  },

  view: {
    default: "tail",
    syntax: [
      "location[±$n]*",
      "  where location ::= [tail] | h[ead] | m[id[dle]]",
      "    and $n ∈ NaturalNumber"
    ],

    examples: [
      "# view last entry in foo",
      "yorn foo -v",
      "# view second entry in foo",
      "yorn foo --view head+1",
      "# view third from last entry in foo",
      "yorn foo -v t-1-1"
    ]
  },

  add: {
    syntax: [
      "$year[/$month[/$day[/$hour[/$minute]]]]",
      "  where all ∈ NaturalNumber",
      "  and $month =~ month name"
    ],

    examples: [
      "# adds 2022 entry to yearYornal, ignores fields not applicable",
      "yorn yearYornal -a 2022/aug/20"
    ]
  },

  match: {
    syntax: "$word",
    examples: [
      "# select entries in last 12 years",
      "# that have the word \"money\" in it  }",
      "yorn foo -l 12.y -m money",
      "# case insensitive"
    ]
  },

  regex: {
    syntax: "$regex",
    examples: [
      "# select entries that have integers",
      "yorn foo -q @ -r \"^\\d+$\""
    ]
  },

  create: {
    syntax: "$yornalname",
    examples: [
      "# create day yornal named foo",
      "yorn -c foo",
      "# create box yornal named foo/bar",
      "yorn -c foo/bar -t box",
      "# create minute yornal named qux",
      "yorn -c qux -t min"
    ]
  },

  type: {
    default: "day",
    syntax: [
      "y[ear] | m[on[th]] | d[ay] |",
      "h[our] | min[ute]  | s[econd] | box",
    ],
  },

  print: {
    default: '\\n\\n#{\'#\' * 40}\\n\\n',
    syntax: "$delimiter",
    examples: [
      "# select all entries and print them without a delimiter",
      "yorn foo -q @ -p ''"
    ]
  },

  print_path: {
    default: "\\n",
    short: :P,
    syntax: "$delimiter",
    examples: [
      "# select last 3 entries and print paths",
      "# --print-path not needed as its default action",
      "yorn foo -l 3 --print-path"
    ]
  }
}


### main

data_dir = (ENV["XDG_DATA_HOME"] and (File.expand_path ENV["XDG_DATA_HOME"]) + "/yornal")
path = (ENV["YORNAL_PATH"] or data_dir or "~/.yornal")
$yornalPath = File.expand_path path

if File.exist? $yornalPath
  if not File.directory? $yornalPath
    exitError("'%s' for yornal storage is not a directory", $yornalPath)
  end
else
  mkdir $yornalPath
  Dir.chdir $yornalPath
  git(:init)
end

Dir.chdir $yornalPath


if ARGV[0] == "git"
  system ARGV.join(' ')
  exit
end

opts = Optimist::options do
  def documentation(option)
    $options[option][:syntax]
      .then(&Format.m(:syntax))
  end

  $options.each do |option, hash|
    opt option, documentation(option),
        :type => :string, **hash
  end

  opt :delete, "Delete selected entries or yornal"
  opt :yes, "Assume yes when asked a question"
  opt :usage, "Print example flag usage", :type => :string, :default => "all"
  opt :full_path, "Print absolute path when printing paths", :short => :F

  $options.each_key do |option|
    [[:add], [:usage], [:create, :type]]
      .each do |set|
        set.each { |o| conflicts o, option unless set.any? option }
    end
  end

  conflicts :last, :first
  conflicts :print, :print_path, :delete, :edit, :view
end

$given = opts.keys
           .filter {|o| o =~ /given/}
           .map {|s| s.to_s[0..(-7)].to_sym}

def given?(option)
  $given.any? option
end

[:print, :print_path]
  .each { |o| opts[o] = Format.special(opts[o]) }


die {
  $options[opts[:usage].to_sym]
    .when(Hash) do |hash|
      puts Format.examples(opts[:usage], hash)
  end
    .when(nil) do
      opts[:usage] == "all" or exitError("unrecognized flag '#{opts[:usage]}'")
      $options.each do |option, hash|
        Format.examples(option.to_s.gsub('_', '-'), hash)
          .when(String) { |x| puts x ; puts }
      end
  end
} if $given == [:usage]

die {
  Parse.yornalType(opts[:type])
    .when(Array) do |type|
      Yornal.create(opts[:create], type[0])
  end
    .when(nil) { exitError "invalid type '#{opts[:type]}'" }
} if [[:create], [:create, :type]].any? $given


$yornalName = ARGV[0]
die { Yornal.report } if $given.empty? && !$yornalName
$yornalName or exitError "yornal name must be given, see --usage"
Yornal.list.any? $yornalName or exitError "yornal '#{$yornalName}' does not exist"
$yornal = Yornal.new($yornalName)


die {
  $yornal.edit
} if $given.empty?

die {
  add = Format.monthswap(opts[:add])
  Validate.entryLiteral(add)
  $yornal.edit(editor, Time.new(*add.split('/')))
} if $given == [:add]

die {
  Yornal.delete($yornalName, !opts[:yes])
} if [[:delete], [:delete, :yes]].any?($given)


$query = Format.monthswap(opts[:query])
Validate.queryFlag $query

$entries = $yornal.entries($query)

if given?(:first) || given?(:last)
  method = given?(:first) ? :first : :last
  type, seconds = Parse.lastFirstFlag(opts[method])
  $entries = [$yornal.send(method, type, seconds, $entries)].flatten
end

$entries.filter! { |e| e.contains? opts[:match] } if given?(:match)
$entries.filter! { |e| e.matches? opts[:regex] } if given?(:regex)

die if $entries.empty?

[:print, :print_path, :delete, :edit, :view]
  .intersection($given).empty?
  .when(false) do
    given?(:print) and $entries.each { |e| e.printout(opts[:print]) }
    given?(:print_path) and
      $entries.each { |e| e.printpath(opts[:print_path], opts[:full_path]) }
    given?(:delete) and $entries.each { |e| e.delete(!opts[:yes]) }
    given?(:edit) and $yornal.edit(editor, Parse.editFlag(opts[:edit], $entries))
    given?(:view) and $yornal.edit(pager, Parse.entrySpec(opts[:view], $entries))
    die
end

if ($entries.size == 1 && !given?(:query))
  $entries.pop.edit
else
  $entries.each { |e| e.printpath(opts[:print_path], opts[:full_path]) }
end
